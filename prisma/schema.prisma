generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id @default(uuid())
  name          String
  email         String
  emailVerified Boolean
  image         String?

  sessions Session[]
  accounts Account[]
  wallet   Wallet[]
  category Category[]
  entry    Entry[]
  budget   Budget[]

  createdAt DateTime
  updatedAt DateTime

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum WalletType {
  BANK
  CARD
  CASH
  OTHER
}

model Wallet {
  id      String     @id @default(uuid())
  name    String
  type    WalletType
  balance Int

  user   User   @relation(fields: [userId], references: [id])
  userId String

  entry Entry[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name])
  @@map("wallet")
}

enum CategoryType {
  NEEDS
  WANTS
  CULTURE
  UNEXPECTED
}

model Category {
  id   String       @id @default(uuid())
  name String
  icon String?
  type CategoryType

  user   User   @relation(fields: [userId], references: [id])
  userId String

  entry  Entry[]
  budget Budget[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name])
  @@map("category")
}

model Entry {
  id     String   @id @default(uuid())
  amount Int
  date   DateTime @default(now())
  note   String?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  wallet   Wallet @relation(fields: [walletId], references: [id])
  walletId String

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("entry")
}

model Budget {
  id    String @id @default(uuid())
  month Int
  year  Int
  limit Int

  user   User   @relation(fields: [userId], references: [id])
  userId String

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("budget")
}
